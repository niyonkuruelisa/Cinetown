@page "/Moviebooking/{cinemaID}/{movieId}/{day}/{time}"
@using System.Text.Json
@using Cinetown.Shared
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ILogger<Booking> Logger
<PageTitle>Movie Bookings</PageTitle>
<style>
    .seat {
  background-color:cadetblue;
  height: 12px;
  width: 15px;
  margin: 3px;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
    }

    .seat.selected {
      background-color: coral;
    }

    .seat.occupied {
      background-color: #444451;
    }
  .showcase .seat:not(.occupied):hover {
  cursor: default;
  transform: scale(1);
}

.seat:nth-of-type(5) {
  margin-right: 48px;
}
.seat:not(.occupied):hover {
  cursor: pointer;
  transform: scale(1.2);
}

.showcase .seat:not(.occupied):hover {
  cursor: default;
  transform: scale(1);
}
.showcase {
  background-color: rgba(0, 0, 0, 0.1);
  padding: 5px 10px;
  border-radius: 5px;
  color: #777;
  list-style-type: none;
  display: flex;
  justify-content: space-between;
}

.showcase li {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 10px;
}

.showcase li small {
  margin-left: 10px;
}
.row {
  display: flex;
}
.container {
  perspective: 1000px;
  margin-bottom: 30px;
}
p.text {
  margin: 5px 0;
}

p.text span {
    
  color: coral;
}
.divider:after,
.divider:before {
content: "";
flex: 1;
height: 1px;
background: #eee;
}
</style>
<div class="text-center">
    <h1>Cinema Booking</h1>
</div>

<div class="row ">
    @if (movie != null)
    {
        <div class="card mb-5 ml-5 mr-5">
            <div class="card-header">
                <h2>@movie.Title</h2>
            </div> 
            <div class="card-body">
                <h5 class="card-title">Genre:  <b>@movie.Genre</b></h5>
                <h5 class="card-title">Director: <b>@movie.Director</b></h5>
                <h5 class="card-title">Cast: <b>@movie.Cast</b></h5>
                <h5 class="card-title">Year: <b>@movie.Year</b></h5>
                <p class="card-title">Notes: <b>@movie.Notes</b></p>
                <button class="btn btn-primary" type="button" disabled>
                    Day: <b>@day</b> Time:  <b>@time</b>
                </button>
            </div>
        </div>
        <div class="alert alert-@errorType" style="display:@showError;">
          <strong>Oops!</strong> @errorMessage;
        </div>
        if (!showSeats)
        {

        <h2><u>TICKETS ONLY</u></h2>

        <ol class="list-group list-group-numbered">
            @foreach (var ticket in tickets)
            {

                <li class="list-group-item d-flex justify-content-between align-items-start">
                    <div class="ms-2 me-auto">
                        <div class="fw-bold">@ticket._ticketName</div>
                        @ConvertToEuro(@ticket._price)
                    </div>
                    <div class="qty mt-5 text-center">
                        <span class="minus bg-dark" @onclick="(() => decreaseByOne(ticket))">-</span>
                        <input type="number" class="count" id="@ticket.Id" disabled=@InputDisabled name="qty" @bind="ticket._people">
                        <span class="plus bg-dark" @onclick="(() => increaseByOne(ticket))">+</span>
                    </div>
                </li>
            }
            </ol>
        }
        else if (showBookUserInfo)
        {
            <section>
              <div class="container py-5 h-100">
                <div class="row d-flex align-items-center justify-content-center">
                  <div class="col-md-7 col-lg-5 col-xl-5 offset-xl-1">
                    <EditForm Model="@bookingModel" OnValidSubmit="@HandleValidSubmit">
                      <DataAnnotationsValidator/>
                      <ValidationSummary />
                      <!-- Name input -->
                      <div class="form-outline mb-4">
                        <InputText @bind-Value="bookingModel.Name" id="nameInput" class="form-control form-control-lg" />
                        <label class="form-label" for="nameInput">Name</label>
                      </div>
                      <!-- Email input -->
                      <div class="form-outline mb-4">
                        <InputText @bind-Value="bookingModel.Email" id="emailInput" class="form-control form-control-lg" />
                        <label class="form-label" for="emailInput">Email address</label>
                      </div>
                      <!-- Submit button -->
                      <button type="submit" class="btn btn-success btn-lg btn-block">Book Now</button>

                    </EditForm>
                  </div>
                </div>
              </div>
            </section>
        }else{
            <div class="text-center">
                <h5>Select your seats by moving your mouse over the seating plan.
                    Pink seats represent your current selection.
                    Green seats are available to be selected.
                    You may select any seat block which changes the seat colour to <span style="height:10px;width:10px;background-color:coral;color:coral;border-radius:5px;">H</span>
                    </h5>
                    <div className="container w-75 text-center border mt-4">
				        <h2>Screen</h2>
			        </div>
			        <div className="container w-75 text-center border">
				        <h2>Front Row</h2>
			        </div>
                    <ul class="showcase">
                      <li>
                        <div class="seat"></div>
                        <small>N/A</small>
                      </li>

                      <li>
                        <div class="seat selected"></div>
                        <small>Selected</small>
                      </li>

                      <li>
                        <div class="seat occupied"></div>
                        <small>Occupied</small>
                      </li>
                    </ul>
                    <div class="container text-center">
                        @for(int row =0;row<10;row++)
                            {
                                
                                <div class="row text-center">
                                @for(int column =0;column< 10;column++)
                                {
                                    var col = row;
                                    var rw = column;
                                    <div class="seat @seats[row,column].state" @onclick="@(e => selectedSeat(col,rw))"></div>
                                }
                                </div>
                            }
                        
                    <p class="text">
                          You have selected <span id="count"><b>@selectedSeats.Count</b></span> of Total seats<span id="total"><b>@TotalSelectedPeople</b></span>
                        </p>
                    </div>

            </div>
        }

        <ul type="none" class="list-group mt-5 mb-5" style="list-style-type:none;border:0px;">
            <li class="list-group-item d-flex justify-content-between align-items-start" >  
                <div class="ms-2 me-auto">
                    <button class="btn btn-secondary btn-lg" @onclick="backToBookings" disabled="@backDisabled">Back</button>
                </div>
                @if ((selectedSeats.Count == TotalSelectedPeople && selectedSeats.Count > 0))
                {
                    <div class="qty text-center">
                        <button class="btn btn-primary btn-lg" style="display:@processButtonShown;" disabled="@freezProcess" @onclick="DisplayBookUserInfo">Proceed To Payment</button>
                    </div>
                }else
                {
                    <div class="qty text-center">
                    <button class="btn btn-primary btn-lg" disabled="@freezProcess" @onclick="showSeatsMethod">Proceed</button>
                </div>
                }
            </li>
        </ul>
    }
    else
    {
        
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
          Loading Movie...
        </button>
    }

</div>

@code {
    // Deal with seats

    Seat[,] seats = new Seat[10,10];
    List<Seat> selectedSeats = new List<Seat>();

    // Deal with movie object

    [Parameter]
    public string movieId { get; set; }  = string.Empty;
    [Parameter]
    public string day { get; set; }  = string.Empty;
    [Parameter]
    public string time { get; set; }  = string.Empty;
    [Parameter]
    public string cinemaID { get; set; }  = string.Empty;
    private Movie movie;
    public string? dayTime;
    public int TotalSelectedPeople { get; set; } = 0;
    public Seat loopSeat { get; set; }

    //Deal with seat matrix
    int[] row = Array.Empty<int>();

    //Deal with Navigations
    private bool InputDisabled = true;
    public bool backDisabled { get; set; } = true; 
    public bool freezProcess { get; set; } = true; 
    private int inputValue = 0;

    private bool showSeats { get; set; } = false;
    private bool showBookUserInfo { get; set; } = false;
    private string processButtonShown { get; set; } = "inline-block";

    //deal with errors
    private string errorType { get; set; } = "info";
    private string showError { get; set; } = "None";
    private string errorMessage { get; set; } = string.Empty;

    private List<Ticket> tickets;

    private Booking bookingModel = new();

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation(selectedSeats.Count.ToString());
        // Process the valid form
        bookingModel.seats = selectedSeats;
        bookingModel.MovieId = movie.Id;
        bookingModel.Day = day;
        bookingModel.Time = time;
        var saved = await Http.PostAsJsonAsync<Booking>($"Booking",new Booking
                {
                    Name = bookingModel.Name,
                    Email = bookingModel.Email,
                    Day = bookingModel.Day,
                    Time = bookingModel.Time,
                    MovieId = bookingModel.MovieId,
                    CinemaId = int.Parse(cinemaID),
                    seats = selectedSeats
                });
        backDisabled = true;
        navigationManager.NavigateTo($"/");
    }

    /// <summary>
    /// Get Movie details on Initialized.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {

        movie = await GetMovieDetails(movieId);
        tickets = await GetTickets();

    }

    private void backToBookings()
    {

        if (showBookUserInfo)
        {
            showBookUserInfo = false;
            backDisabled = false;
            processButtonShown = "inline-block";
            showSeats = true;


        }
        else
        {

            selectedSeats = new List<Seat>();
            backDisabled = true;
            showSeats = false;
        }

    }
    private async Task showSeatsMethod()
    {
        backDisabled = false;
        showSeats = true;
        await createBookings();
    }

    private void DisplayBookUserInfo()
    {
        backDisabled = false;
        showBookUserInfo = true;
        processButtonShown = "none";

    }


    private void increaseByOne(Ticket ticket)
    {

        if (TotalSelectedPeople < 6)
        {
            var adult = tickets.Find(adult => adult._ticketName == "ADULT" && adult._people > 0);
            if(adult == null && ticket._ticketName.Contains("CHILD"))
            {
                errorType = "danger";
                showError = "inline-block";
                errorMessage = "Select at least 1 Adult before selecting a Child.";
            }
            else
            {
                showError = "none";
                ticket._people += 1;
                TotalSelectedPeople += 1;
            }
        }

        freez();
    }
    private void decreaseByOne(Ticket ticket)
    {
        if(TotalSelectedPeople > 0 & ticket._people > 0)
        {
            ticket._people -= 1;
            TotalSelectedPeople -= 1;
            // When adult removed let's reset child's number too
            if (ticket._ticketName == "ADULT" && ticket._people == 0)
            {
                var child = tickets.Find(child => child._ticketName.Contains("CHILD") && child._people > 0);
                if(child != null)
                {
                    TotalSelectedPeople = TotalSelectedPeople - child._people;
                    child._people = 0;
                }
            }
        }

        freez();

    }

    // Freez process
    private void freez()
    {
        if(TotalSelectedPeople > 0)
        {
            freezProcess = false;
        }
        else
        {
            freezProcess = true;
        }
    }

    private void selectedSeat(int row,int column)
    {
        Seat seat = seats[row, column];
        //get selected list;

        //check if selected seats match people who has been selected in bookings.


        showError = "none";
        switch (seat.state)
        {
            case "selected":
                seat.state = "N/A";
                selectedSeats.Remove(seat);
                break;

            case "N/A":
                if (selectedSeats.Count <  TotalSelectedPeople)
                {
                    seat.state = "selected";
                    selectedSeats.Add(seat);

                }
                break;
        }

    }

    private async Task createBookings()
    {

        // Reset selected Seats
        if(TotalSelectedPeople > 0)
        {
            for(int row = 0; row <10; row++)
            {
                for(int column = 0; column<10;column++)
                {
                    seats[row, column] = new Seat { id = Guid.NewGuid().ToString(), row = row, column = column,state = "N/A" };

                }
            }

        }
        //Add Occupied Seats
        List<Seat>? occupiedSeats = new List<Seat>();
        occupiedSeats = await Http.GetFromJsonAsync<List<Seat>>($"Seat/All?cinemaId={cinemaID}&movieId={movieId}&day={day}&time={time}");
        foreach (var occupiedSeat in occupiedSeats)
        {
            seats[occupiedSeat.row, occupiedSeat.column] = new Seat { id = occupiedSeat.id, row = occupiedSeat.row, column = occupiedSeat.column,state = "occupied" };
        }
        int localPeopleSelected = TotalSelectedPeople;
        //First clear All Selected Seats
        if (selectedSeats.Count > 0)
        {
            if (selectedSeats.Count> 0)
            {

            }
        }
        else
        {
            foreach (var seat in selectedSeats)
            {
                seats[seat.row, seat.column].state = "N/A";

            }
        }

        //Add Selected seats
        for(int row = 0; row <10; row++)
        {
            for(int column = 0; column<10;column++)
            {

                //check if 2D space exist if exist skip it.
                if (localPeopleSelected > 0 && seats[row, column].state == "N/A")
                {
                    seats[row,column] = new Seat { id = Guid.NewGuid().ToString(),row = row, column =column, state = "selected" };
                    selectedSeats.Add(seats[row,column]);
                    localPeopleSelected--;
                }
            }
        }
        Logger.LogInformation(selectedSeats.Count + "");

    }
    //Convert money to Euros
    private string ConvertToEuro(double amount )
    {
        return string.Format("€{0:N2}", amount);
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param></param>
    /// <returns></returns>
    private async Task<List<Ticket>> GetTickets()
    {
        return await Http.GetFromJsonAsync<List<Ticket>>($"Ticket/All/");
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="movieId"></param>
    /// <returns></returns>
    private async Task<Movie> GetMovieDetails(string movieId)
    {
        return await Http.GetFromJsonAsync<Movie>($"Movie/Details/{movieId}");
    }
    /// <summary>
    /// This method will change Times based on Time.
    /// </summary>
    /// <param name="day"></param>
    private void onDayClick(string day)
    {
        
        dayTime = day;

    }
}
